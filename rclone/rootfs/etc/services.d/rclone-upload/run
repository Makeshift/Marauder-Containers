#!/usr/bin/with-contenv sh
PREFIX=Media/
SOURCE=/shared/separate/$PREFIX
MOUNT_LOCATION=/shared/merged/
DEST=uploadgdrive:/$PREFIX
CONF_FILE=/config/.rclone.conf
RCLONE_HOST="127.0.0.1"
RCLONE_PORT="5572"
RCLONE_ARGS="--fast-list -v --checkers 12 --buffer-size 16M --transfers 6 --use-mmap --low-level-retries 3 --multi-thread-cutoff 25M --multi-thread-streams 8 --no-update-modtime"
TMP_FILE=/tmp/rclone.uploads
MIN_AGE=15m
SLEEP_SECONDS=600

LOG="[services.d] [rclone-upload]-$(s6-basename ${0}):"
DEBUG="${LOG} [DEBUG]:"

urlencode() {
    data="$(curl -s -o /dev/null -w %{url_effective} --get --data-urlencode "$1" "")"
    echo "${data##/?}"
    return 0
}

echo "$LOG Starting upload service"
while true; do 
    START_TIME=$(date +%s)
    echo "$LOG Checking for uploads..."
    if [ -d "$SOURCE" ]; then
        # Get a static list of uploads
        UPLOAD_LIST=$(rclone --config "$CONF_FILE" lsf -R --files-only "$SOURCE" --min-age $MIN_AGE)
        # Get dirs for the VFS refresh later
        DIR_LIST=$(rclone --config "$CONF_FILE" lsf -R --dirs-only "$SOURCE" --min-age $MIN_AGE)
        # Count the bytes to check if we actually do have anything to upload
        COUNT_CHARS=$(printf "%s" "$UPLOAD_LIST" | wc -c)
        if [ "$COUNT_CHARS" -gt 0 ]; then
            # We got stuff to upload! Get a count and tell the user so they don't think we've hung
            #  also, this is sort of cheeky since it'll always return at least 1, but we already checked if we
            #  have stuff to upload so it's cool
            COUNT=$(printf "%s\n" "$UPLOAD_LIST" | wc -l)
            echo "$LOG Found ${COUNT} files to upload! Uploading..."
            # Print the static list to file
            printf "%s" "$UPLOAD_LIST" > "$TMP_FILE"
            # Copy everything to the mount first to ensure that it's all still available while we're uploading
            rclone --config "$CONF_FILE" copy --files-from "$TMP_FILE" "$SOURCE" "$DEST" --no-traverse $RCLONE_ARGS
            # Chill for 10s to make sure Gdrive is consistent
            sleep 10s
            # Do the 'move', which in theory will just delete the files on the local filesystem
            rclone --config "$CONF_FILE" move --files-from "$TMP_FILE" "$SOURCE" "$DEST" --delete-empty-src-dirs --no-traverse $RCLONE_ARGS | grep Deleted
            echo "$LOG Upload complete"
            # Clean up after ourselves
            rm $TMP_FILE
            # Mass refresh everything we uploaded so nothing has a panic attack
            IFS='
            '
            for p in $DIR_LIST; do
                # Add media folder prefix
                p=${PREFIX}${p}
                ESCAPED_URL=$(urlencode "${RCLONE_HOST}:${RCLONE_PORT}/vfs/refresh?dir=${p}")
                echo "$DEBUG Telling Rclone @ ${RCLONE_HOST}:${RCLONE_PORT} to vfs/refresh ${p} with ${ESCAPED_URL}"
                if curl -fs -X POST "${ESCAPED_URL}"; then
                    #echo "$DEBUG Rclone VFS refreshed successfully: ${p}"
                    true
                else 
                    echo "$LOG Failed to VFS refresh, may not be visible to client: ${p}"
                fi

                ESCAPED_URL=$(urlencode "${RCLONE_HOST}:${RCLONE_PORT}/cache/expire?remote=${p}")
                echo "$DEBUG Telling Rclone @ ${RCLONE_HOST}:${RCLONE_PORT} to cache/expire ${p} with ${ESCAPED_URL}"
                if curl -fs -X POST "${ESCAPED_URL}"; then
                    #echo "$DEBUG Rclone cache refreshed successfully: ${p}"
                    true
                else 
                    echo "$LOG Failed to cache refresh, may not be visible to client: ${p}"
                fi
                # Now, force an ls in each dir to update the caches again
                #  but do it in the background so we don't slow down the script a bunch
                ls "${MOUNT_LOCATION}${p}" >/dev/null &
            done
        else
            echo "$LOG Nothing to upload in $SOURCE"
        fi
    else
        echo "$LOG $SOURCE does not exist, skipping upload."
    fi
    # Clear vars for the next loop
    unset DIR_LIST UPLOAD_LIST COUNT
    # Take away the time we spent processing from the repeat time. This ensures we're only doing one upload at once, but if there's
    #  lots of files coming in, we'll continuously upload anything that matches the filter criteria
    END_TIME=$(date +%s)
    WORK_TIME=$(expr ${END_TIME} - ${START_TIME})
    SLEEP_TIME=$(expr ${SLEEP_SECONDS} - ${WORK_TIME})
    # Sleep for a bit if we have any sleeping to do
    if [ "$SLEEP_TIME" -gt 0 ]; then
        sleep ${SLEEP_TIME}s
    fi
done